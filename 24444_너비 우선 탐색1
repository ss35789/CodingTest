import java.util.*;
import java.lang.*;
import java.io.*;

// The main method must be in a class named "Main".
class Main {
    public static int seq = 0;
    public static void main(String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());

        int N = Integer.parseInt(st.nextToken());
        int M = Integer.parseInt(st.nextToken());

        int R = Integer.parseInt(st.nextToken());
        ArrayList<Integer>[] routes = new ArrayList[N+1]; // arrayList 배열
        int[] nodeOrder = new int[N+1];

        for(int i=0;i<M;i++){// 간선 입력

            st = new StringTokenizer(br.readLine());
            int start = Integer.parseInt(st.nextToken());
            int goal = Integer.parseInt(st.nextToken());

            if(routes[start] == null){
                routes[start] = new ArrayList<>();
            }
            if(routes[goal] == null){
                routes[goal] = new ArrayList<>();
            }

            routes[start].add(goal);
            routes[goal].add(start);
        }

        for(int i=1;i<=N;i++){ // 각 정점루트 정렬
            if(routes[i] != null)Collections.sort(routes[i]);
        }


        bfs(nodeOrder, routes, R);

        StringBuilder sb = new StringBuilder();
        for(int i=1;i<=N;i++){
            sb.append(nodeOrder[i]).append("\n");
        }
        System.out.print(sb);
    }

    public static void bfs(int[] nodeOrder, ArrayList<Integer>[] routes, int start) {
        Queue<Integer> qu = new LinkedList<>();
        qu.add(start);

        while(!qu.isEmpty()){
            int current = qu.poll();
            if(nodeOrder[current] == 0)  nodeOrder[current] = ++seq; //다른 큐를 체크할때 방문했던 곳일 수도 있으니 조건 추가

            for(int neighbor : routes[current]){
                if(nodeOrder[neighbor] == 0) //방문하지 않은곳만 추가 (방문된 곳을 넣으면 무한 루프에 빠짐)
                        qu.add(neighbor);
            }
            

        }
    }
}






