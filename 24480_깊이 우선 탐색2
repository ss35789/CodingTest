import java.util.*;
import java.lang.*;
import java.io.*;

// The main method must be in a class named "Main".
class Main {
    public static int seq = 0;
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        
        int n = Integer.parseInt(st.nextToken());
        int m = Integer.parseInt(st.nextToken());
        int r = Integer.parseInt(st.nextToken());
        int[] visitedOrder = new int[n+1];
        
        //routes 초기화
        ArrayList<Integer>[] routes = new ArrayList[n+1];
        for(int i=1;i<=n;i++){
            routes[i] = new ArrayList<Integer>();
        }

        
        //routes 입력
        for(int i=0;i<m;i++){
            st= new StringTokenizer(br.readLine());
            int start = Integer.parseInt(st.nextToken());
            int goal = Integer.parseInt(st.nextToken());
            
            routes[start].add(goal);
            routes[goal].add(start);
            
        }

        //routes 내림차순 정렬
        for(int i=1;i<=n;i++){
            Collections.sort(routes[i], (a, b) -> b-a);
            
        }
        
        dfs(visitedOrder, routes, r);

        StringBuilder sb =new StringBuilder();
        for(int i=1;i<=n;i++){
            sb.append(visitedOrder[i]).append("\n");
        }

        System.out.print(sb);
    }
    public static void dfs(int[] visitedOrder, ArrayList<Integer>[] routes, int start){
        
        visitedOrder[start] = ++seq;

        for(int goal : routes[start]){
            if(visitedOrder[goal]==0)
                dfs(visitedOrder, routes, goal);
        }
        


        
    }

}
