import java.util.*;

public class Main {
    static List<Integer>[] tree;
    static int[] subtreeSize;
    static boolean[] visited;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // 입력 받기
        int N = sc.nextInt();
        int R = sc.nextInt();
        int Q = sc.nextInt();

        // 트리 초기화
        tree = new ArrayList[N + 1];
        for (int i = 0; i <= N; i++) {
            tree[i] = new ArrayList<>();
        }

        // 간선 입력 받기
        for (int i = 0; i < N - 1; i++) {
            int U = sc.nextInt();
            int V = sc.nextInt();
            tree[U].add(V);
            tree[V].add(U);
        }

        // 서브트리 크기 배열 및 방문 배열 초기화
        subtreeSize = new int[N + 1];
        visited = new boolean[N + 1];

        // DFS를 이용한 서브트리 크기 계산
        dfs(R);

        // 쿼리 처리
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < Q; i++) {
            int U = sc.nextInt();
            sb.append(subtreeSize[U]).append("\n");
        }

        // 결과 출력
        System.out.print(sb.toString());
        sc.close();
    }

    static int dfs(int node) {
        visited[node] = true;
        int size = 1;
        for (int child : tree[node]) {
            if (!visited[child]) {
                size += dfs(child);
            }
        }
        subtreeSize[node] = size;
        return size;
    }
}
