import java.util.*;
import java.lang.*;
import java.io.*;

// The main method must be in a class named "Main".
class Main {
    public static void main(String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());

        int N = Integer.parseInt(st.nextToken());
        int R = Integer.parseInt(st.nextToken());
        int Q = Integer.parseInt(st.nextToken());

        ArrayList<Integer>[] route = new ArrayList[N+1];//간선 배열
        int[] dp = new int[N+1]; // 인덱스별 노드가 서브트리의 정점일 때 자식들 수
        boolean[] visited = new boolean[N+1]; // 방문확인용 
        
        for(int i=1;i<=N;i++){ // list 배열 초기화
            route[i] = new ArrayList<Integer>();
        }

        for(int i=0;i<N-1;i++){
            st = new StringTokenizer(br.readLine());
            int u = Integer.parseInt(st.nextToken());
            int v = Integer.parseInt(st.nextToken());
            
            route[u].add(v);
            route[v].add(u);
        }

        
        dp[R] = dfs(R ,route , visited, dp);
        


        StringBuilder sb = new StringBuilder();
        for(int i=0;i<Q;i++){
            int u = Integer.parseInt(br.readLine());
            sb.append(dp[u]).append("\n");
            
        }
        
        System.out.println(sb);
    }

    public static int dfs(int node , ArrayList<Integer>[] route, boolean[] visited, int[] dp){ // 해당 노드에서 방문한 노드를 제외한 노드들의 size를 더함, dp내부는 계속해서 자식 노드들로 들어가고 자식이 없으면 1을 반환

        if(visited[node]){
            return 0;
        }
       visited[node] = true;

        int size = 1;// 자신 노드
        
        for(int next : route[node]){
            if(!visited[next]){
                size += dfs(next, route, visited, dp);
            }
        }

        dp[node] = size;
        return size;
    }
    
}
