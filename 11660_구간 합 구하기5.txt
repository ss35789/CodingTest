import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.StringTokenizer;

public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        
        // 첫째 줄에 표의 크기 N과 합을 구해야 하는 횟수 M이 주어짐
        StringTokenizer st = new StringTokenizer(br.readLine());
        int N = Integer.parseInt(st.nextToken());
        int M = Integer.parseInt(st.nextToken());
        
        // 원본 배열 입력 받기
        int[][] A = new int[N + 1][N + 1];
        for (int i = 1; i <= N; i++) {
            st = new StringTokenizer(br.readLine());
            for (int j = 1; j <= N; j++) {
                A[i][j] = Integer.parseInt(st.nextToken());
            }
        }
        
        // 2차원 구간 합 배열 생성
        int[][] S = new int[N + 1][N + 1];
        for (int i = 1; i <= N; i++) {
            for (int j = 1; j <= N; j++) {
                S[i][j] = A[i][j] + S[i - 1][j] + S[i][j - 1] - S[i - 1][j - 1];
            }
        }
        
        // 질의 처리 및 결과 출력
        StringBuilder sb = new StringBuilder();
        for (int k = 0; k < M; k++) {
            st = new StringTokenizer(br.readLine());
            int x1 = Integer.parseInt(st.nextToken());
            int y1 = Integer.parseInt(st.nextToken());
            int x2 = Integer.parseInt(st.nextToken());
            int y2 = Integer.parseInt(st.nextToken());
            
            int result = S[x2][y2] - S[x1 - 1][y2] - S[x2][y1 - 1] + S[x1 - 1][y1 - 1];
            sb.append(result).append('\n');
        }
        
        // 최종 결과 출력
        System.out.print(sb.toString());
    }
}



// import java.util.*;
// import java.lang.*;
// import java.io.*;

// // The main method must be in a class named "Main".
// public class Main {
//     public static void main(String[] args) {
//         Scanner sc = new Scanner(System.in);
//         int N = sc.nextInt();
//         int M = sc.nextInt();

//         //(1 ≤ N ≤ 1024, 1 ≤ M ≤ 100,000)
        
        
//         int[][] arr = new int[N+1][N+1];
//         int[][] dp = new int[N+1][N+1];

            
//         for(int x=1;x<N+1;x++){
//             for(int y=1;y<N+1;y++){
//                 arr[x][y] = sc.nextInt();
//                 dp[x][y] =  dp[x-1][y] + dp[x][y-1] - dp[x-1][y-1] + arr[x][y];
//             }
                
//         } 
        

//         for(int i=1;i<N+1;i++){
//             for(int j=1;j<N+1;j++){
//                 System.out.print(arr[i][j]+" ");
//             }
//             System.out.print("\n");
//         }
//         //(x1 ≤ x2, y1 ≤ y2)
        
//         for(int i=0;i<M;i++){
//             int x1 = sc.nextInt();
//             int y1 = sc.nextInt();
//             int x2 = sc.nextInt();
//             int y2 = sc.nextInt();
    
                

//             System.out.println(dp[x2][y2] - dp[x1-1][y2] - dp[x2][y1-1] + dp[x1-1][y1-1]);
            
//         }
//     }
// }
