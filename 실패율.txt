import java.util.*;
import java.util.Map.Entry;


class Solution {
    public ArrayList<Integer> solution(int N, int[] stages) {
        ArrayList<Integer> answer=new ArrayList<>();
        Map<Integer, Double> fail = new HashMap<Integer, Double>();
        ArrayList<Integer> stage = new ArrayList<>();
        
        for(int i=0;i<stages.length;i++){
            stage.add(stages[i]);
            
        }
        
        Collections.sort(stage,Collections.reverseOrder());
        int rc=0;
        for(int i=0;i<stage.size();i++){
            if(N<stage.get(i)){
                stage.remove(i);
                rc++;
            }
        }
        //System.out.println(stage);
        
        for(int j=1;j<=N;j++){
            
            int n=stage.size()+rc;
            int count=0;
           
            for(int i=stage.size()-1;i>=0;i--){
                if(stage.get(i)==j){
                    count++;
                    stage.remove(i);
                }
                
                else
                    break;
                if(stage.size()==0)break;
                
                

            }
            if(n==0)fail.put(j,0.0);
            else
                fail.put(j,count/(n*1.0));
           
            
            //System.out.println(j+" : "+count+" : "+n);
            
            //count*10000/n : value
           // N : key
            
        }
		List<Entry<Integer, Double>> list_entries = new ArrayList<Entry<Integer, Double>>(fail.entrySet());
		Collections.sort(list_entries, new Comparator<Entry<Integer, Double>>() {
			// compare로 값을 비교
			public int compare(Entry<Integer, Double> obj1, Entry<Integer, Double> obj2) {
				// 내림 차순 정렬
				return obj2.getValue().compareTo(obj1.getValue());
			}
		});
        for(Entry<Integer, Double> entry : list_entries) {
			answer.add(entry.getKey());
            //System.out.println(entry.getKey()+" : "+entry.getValue());
		}
        
        
        
        return answer;
    }
}